"""
This type stub file was generated by pyright.
"""

import pyvips
from logging import Logger
from typing import Any, Dict, Literal, Tuple, Union

logger: Logger
class VipsObject(pyvips.GObject):
    """Manage a VipsObject."""
    __slots__: Tuple[Literal["vobject"], Literal["gobject"]]
    _pspec_cache: Dict[str, pyvips.CData]
    def __init__(self, pointer: pyvips.CData) -> None:
        ...
    
    @staticmethod
    def print_all(msg: str) -> None:
        """Print all objects.

        Print a table of all active libvips objects. Handy for debugging.

        """
        ...
    
    def get_typeof(self, name: str) -> Union[pyvips.GType, Literal[0]]:
        """Get the GType of a GObject property.

        This function returns 0 if the property does not exist.

        """
        ...
    
    def get_blurb(self, name: str) -> str:
        """Get the blurb for a GObject property."""
        ...
    
    def get(self, name: str) -> Any: #TODO change to GValue type
        """Get a GObject property.

        The value of the property is converted to a Python value.

        """
        ...
    
    def set(self, name :str, value: Any) -> None: #TODO change to GValue type
        """Set a GObject property.

        The value is converted to the property type, if possible.

        """
        ...
    
    def set_string(self, string_options: str) -> bool:
        """Set a series of properties using a string.

        For example::

            'fred=12, tile'
            '[fred=12]'

        """
        ...
    
    def get_description(self) -> str:
        """Get the description of a GObject."""
        ...
    


__all__ = ['VipsObject']
