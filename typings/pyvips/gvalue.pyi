"""
This type stub file was generated by pyright.
"""

from .base import at_least_libvips

logger = ...
_is_PY2 = ...
class GValue:
    """Wrap GValue in a Python class.

    This class wraps :class:`.GValue` in a convenient interface. You can use
    instances of this class to get and set :class:`.GObject` properties.

    On construction, :class:`.GValue` is all zero (empty). You can pass it to
    a get function to have it filled by :class:`.GObject`, or use init to
    set a type, set to set a value, then use it to set an object property.

    GValue lifetime is managed automatically.

    """
    __slots__ = ...
    gbool_type = ...
    gint_type = ...
    guint64_type = ...
    gdouble_type = ...
    gstr_type = ...
    genum_type = ...
    gflags_type = ...
    gobject_type = ...
    image_type = ...
    array_int_type = ...
    array_double_type = ...
    array_image_type = ...
    refstr_type = ...
    blob_type = ...
    source_type = ...
    target_type = ...
    format_type = ...
    if at_least_libvips(8, 6):
        ...
    blend_mode_type = ...
    _gtype_to_python = ...
    @staticmethod
    def gtype_to_python(gtype): # -> str:
        """Map a gtype to the name of the Python type we use to represent it.

        """
        ...
    
    @staticmethod
    def to_enum(gtype, value):
        """Turn a string into an enum value ready to be passed into libvips.

        """
        ...
    
    @staticmethod
    def from_enum(gtype, enum_value): # -> str:
        """Turn an int back into an enum string.

        """
        ...
    
    def __init__(self) -> None:
        ...
    
    def set_type(self, gtype): # -> None:
        """Set the type of a GValue.

        GValues have a set type, fixed at creation time. Use set_type to set
        the type of a GValue before assigning to it.

        GTypes are 32 or 64-bit integers (depending on the platform). See
        type_find.

        """
        ...
    
    def set(self, value): # -> None:
        """Set a GValue.

        The value is converted to the type of the GValue, if possible, and
        assigned.

        """
        ...
    
    def get(self): # -> str | bool | Image | list[Unknown] | None:
        """Get the contents of a GValue.

        The contents of the GValue are read out as a Python type.
        """
        ...
    


__all__ = ['GValue']
