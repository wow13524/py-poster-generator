"""
This type stub file was generated by pyright.
"""

from .base import GEnum, GType
from .gobject import GObject
from .vimage import Image
from logging import Logger
from typing import List, Literal, Tuple, TypedDict, Union

class GTypeToPython(TypedDict):
    gbool_type: Literal["bool"]
    gint_type: Literal["int"]
    guint64_type: Literal["long"]
    gdouble_type: Literal["float"]
    gstr_type: Literal["str"]
    refstr_type: Literal["str"]
    genum_type: Literal["str"]
    gflags_type: Literal["int"]
    gobject_type: Literal["GObject"]
    image_type: Literal["Image"]
    array_int_type: Literal["list[int]"]
    array_double_type: Literal["list[float]"]
    array_image_type: Literal["list[Image]"]
    blob_type: Literal["str"]
    source_type: Literal["Source"]
    target_type: Literal["Target"]

GValueType = Union[bool, int, float, str, GObject, Image, List[int], List[float], List[Image]]

logger: Logger
_is_PY2: bool
class GValue:
    """Wrap GValue in a Python class.

    This class wraps :class:`.GValue` in a convenient interface. You can use
    instances of this class to get and set :class:`.GObject` properties.

    On construction, :class:`.GValue` is all zero (empty). You can pass it to
    a get function to have it filled by :class:`.GObject`, or use init to
    set a type, set to set a value, then use it to set an object property.

    GValue lifetime is managed automatically.

    """
    __slots__: Tuple[Literal["pointer"], Literal["gvalue"]]
    gbool_type: GType
    gint_type: GType
    guint64_type: GType
    gdouble_type: GType
    gstr_type: GType
    genum_type: GType
    gflags_type: GType
    gobject_type: GType
    image_type: GType
    array_int_type: GType
    array_double_type: GType
    array_image_type: GType
    refstr_type: GType
    blob_type: GType
    source_type: GType
    target_type: GType
    format_type: GType
    blend_mode_type: GType
    _gtype_to_python: GTypeToPython

    @staticmethod
    def gtype_to_python(gtype: GType) -> str:
        """Map a gtype to the name of the Python type we use to represent it.

        """
        ...
    
    @staticmethod
    def to_enum(gtype: GType, value: Union[GEnum, str]) -> GEnum:
        """Turn a string into an enum value ready to be passed into libvips.

        """
        ...
    
    @staticmethod
    def from_enum(gtype: GType, enum_value: GEnum) -> str:
        """Turn an int back into an enum string.

        """
        ...
    
    def __init__(self) -> None:
        ...
    
    def set_type(self, gtype: GType) -> None:
        """Set the type of a GValue.

        GValues have a set type, fixed at creation time. Use set_type to set
        the type of a GValue before assigning to it.

        GTypes are 32 or 64-bit integers (depending on the platform). See
        type_find.

        """
        ...
    
    def set(self, value: GValueType) -> None:
        """Set a GValue.

        The value is converted to the type of the GValue, if possible, and
        assigned.

        """
        ...
    
    def get(self) -> GValueType:
        """Get the contents of a GValue.

        The contents of the GValue are read out as a Python type.
        """
        ...
    


__all__ = ['GValue']
