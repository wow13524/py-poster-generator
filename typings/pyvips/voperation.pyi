"""
This type stub file was generated by pyright.
"""

import pyvips

logger = ...
_REQUIRED = ...
_CONSTRUCT = ...
_SET_ONCE = ...
_SET_ALWAYS = ...
_INPUT = ...
_OUTPUT = ...
_DEPRECATED = ...
_MODIFY = ...
_OPERATION_DEPRECATED = ...
class Introspect:
    """Build introspection data for operations.

    Make an operation, introspect it, and build a structure representing
    everything we know about it.

    """
    __slots__ = ...
    def __init__(self, operation_name) -> None:
        ...
    
    _introspect_cache = ...
    @classmethod
    def get(cls, operation_name):
        ...
    


class Operation(pyvips.VipsObject):
    """Call libvips operations.

    This class wraps the libvips VipsOperation class.

    """
    __slots__ = ...
    _docstring_cache = ...
    def __init__(self, pointer) -> None:
        ...
    
    @staticmethod
    def new_from_name(operation_name): # -> Operation:
        ...
    
    def set(self, name, flags, match_image, value): # -> None:
        ...
    
    @staticmethod
    def call(operation_name, *args, **kwargs): # -> list[Unknown] | None:
        """Call a libvips operation.

        Use this method to call any libvips operation. For example::

            black_image = pyvips.Operation.call('black', 10, 10)

        See the Introduction for notes on how this works.

        """
        ...
    
    @staticmethod
    def generate_docstring(operation_name):
        """Make a google-style docstring.

        This is used to generate help() output.

        """
        ...
    
    @staticmethod
    def generate_sphinx(operation_name):
        """Make a sphinx-style docstring.

        This is used to generate the off-line docs.

        """
        ...
    
    @staticmethod
    def generate_sphinx_all(): # -> None:
        """Generate sphinx documentation.

        This generates a .rst file for all auto-generated image methods. Use it
        to regenerate the docs with something like::

            $ python -c \
"import pyvips; pyvips.Operation.generate_sphinx_all()" > x

        And copy-paste the file contents into doc/vimage.rst in the appropriate
        place.

        """
        ...
    


def cache_set_max(mx): # -> None:
    """Set the maximum number of operations libvips will cache."""
    ...

def cache_set_max_mem(mx): # -> None:
    """Limit the operation cache by memory use."""
    ...

def cache_set_max_files(mx): # -> None:
    """Limit the operation cache by number of open files."""
    ...

def cache_set_trace(trace): # -> None:
    """Turn on libvips cache tracing."""
    ...

def cache_get_max():
    """Get the maximum number of operations libvips will cache."""
    ...

def cache_get_size():
    """Get the current size of the operations cache."""
    ...

def cache_get_max_mem():
    """Get the operation cache limit by memory use."""
    ...

def cache_get_max_files():
    """Get the operation cache limit by number of open files."""
    ...

def block_untrusted_set(state): # -> None:
    """Set the block state for all untrusted operations."""
    ...

def operation_block_set(name, state): # -> None:
    """Set the block state for a named operation."""
    ...

__all__ = ['Introspect', 'Operation', 'cache_set_max', 'cache_set_max_mem', 'cache_set_max_files', 'cache_set_trace', 'cache_get_max', 'cache_get_max_mem', 'cache_get_max_files', 'cache_get_size', 'block_untrusted_set', 'operation_block_set']
